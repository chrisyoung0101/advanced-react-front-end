

goal : just to capture intalls and things

download zip 
open separately FE & BE 
in each DIR run : npm install
run next.js app : npm run dev 

/////
children : 
Scenario -> index.js or even App.js or whatever you are rendering the Page componet with an open tag <Page></Page> but inside you've got some child that you want to render.  In order to render the children you've got to pass it via props in the Page.js component : 

import Page from '../components/Page';

export default function IndexPage() {
  return (
    <Page>
      <p>Hello Wowld!</p>
    </Page>
  );
}



export default function Page({ children }) {
  return (
    <div>
      <p>I am the page component</p>
      {children}
    </div>
  );
} 

/////
Next.js and _app.js : "_" makes it the highest component in pages directory

/////
Next.js & custom document : 
_document.js  


lowercase means it is HTML <header></header>

emmet exapnd abreviation expands tags for you

linking from page to page : 
note : link here is from Next

linking within your site : use Link tag
linking outside the site : use the anchor tag


select all lines : select at line #s 
put a cursor on each line : option + click 

Styled Components : 
Example -> styled.header`` means we are adding styles to this header HTML tag 

CSS : you select a Link to be styled with 'a' 

shortcuts aka completions (still Emmet:Expand Abbreviations) : 
fz4r = font-size: 4rem;
ml2r = margin-left: 2rem;
z2 = z-index: 2;


var(--black, black) where --black is the variable and the second parameter of black is the fallback value

GlobalStyles is going in Page.js (not a Next page).  Why here? 



Setting a font on the body does not apply it to a button so you must style the button too. 


The in progress bar : 
NProgress



CSS Flicker on reload page : 


-has to do with Styled Components and the random IDs created 

Reason for flicker : 
Styles were not getting rendered on the server - Flash of unstyled text

Resolution : see getInitialProps in _document.js -> this will make the style sheets server side rendered now. 




Possibly with this error - 
"Warning Prop `className` did not match. Server ... " 
- fix it by deleting the .next dir and restarting



Keystone : kind of a layer that sits on top of MongoDB and postgress and another DB type 

We can :
run mongodb locally - which can be a pain look at the docs 

recommended : use MongoDB Atlas 


MongoDB database username & PW : 
wallwalker
AL2Fh6SSapPZFGTI

In MongoDB, create a new Organization for each new project

MongoDB database user (goes in the .env file with theDATABASE_URL): 
MongoDBSickFits
AdarRyZv4uJODmGI

Probably need to follow video 10 again to set up another MongoDb

GraphQL example : 
note -> you've got to ask for each bit of data excplicitly meaning no give me back all data.

//here we are asking for only these properties from 
//all products

query {
  allProducts { 
	name	
	description
	price
   }
}

cool thing about GraphQL is you don't need endpoints you just ask for what you want.

mutation : keyword like query but for I guess creating, deleting and updating data. 

Note -> we use relationships in keystone? that will allow us to make queries like doing a forEach or something in the query. 

Backend : we are doing typescript

run keystone : 
npm run dev 

schema : description of how the data will look like


keystone.js is keystone server config

session : when someone logs in, it sets a cookie, which gives the user a session where they are logged in until they log out or the cookie expires.  

session when logged out looks like : 
{
  listKey: 'User',
  itemId: '639ddbea4da39cfda0dabc3c',
  data: [Object: null prototype] { id: '639ddbea4da39cfda0dabc3c' }
}


section on seed data shows how to get initial test data into your keystone and mongodb compass. 

Note : you're seed data images will appear broken which we should be fixing later.

get your own data in : see end of video 18

In keystone, api/graphql playgorund thing, use ctrl + space to show all possible selections for a query item. ... but not working.


Apollo Client: sounds like kinda similar what a java backend manages


Wes gave us withData.js in lib, in the FE, helps to import images cause apollo boost? doesn't 

Apollo Dev Tools : this gets installed automagically in your chrome browser from the Apollo specific code we've written.

Using GraphQL extension for VSCode by Orsen Kucher

key for mapping in React is whatever is unique to that piece of data

React Components dev tools : sometimes there's to much stuff to see what you want, so try going to the components dev tools tab and then disabling Hide components where type equels dom nodes and then say if you are looking for the products list you just rendered then it should show up. 

///
IF you get this error in the console : 
react-dom.development.js?61bb:67 Warning: Prop `className` did not match. Server: "sc-gsDKAQ hGmukn" Client: "sc-bdvvtL gFGQfC"

Then do this : 
kill the frontend in the terminal
delete .next folder
run: npm run dev
///

something about how you see logs in the terminal which is coming from the server as this stuff is server rendered & then you see the same logs in the console of the browser and which is it basically rehydrating and updating itself on the client.

Nested chaining : 
product?.photo?.image?.publicUrlTransformed 
...says : does product exist? does image exist? 
something about for photos they might not be accessed the same way each time and this helps out maybe? 


Next.js : what you put in a page will get dumped in the <body> where I think files like _app.js are for maybe the other stuff that goes in an HTML doc like head and whatever eventhough these "_" files can be used for other things.  They are higher up the chain than pages and pages are higher up the chain than Components.

lib & utils folders : where you put handy functions 

Intl API is a great formatter


Target : guess what?!  All the attributes on the <input /> is the target! 

State & Inputs : 
React is strict with state.  You must listen for a change event on an input and when that happens you need to intercept what the user typed, put it back into state which triggers a rerender and updates the value so like as in value={name} where 'name' piece of state gets updated.


A react form handling state 101 : 

import { useState } from 'react';

export default function CreateProduct() {
  const [name, setName] = useState('Coo');

  return (
    <form>
      <label htmlFor="name">
        Name
        <input
          type="text"
          id="name"
          name="name"
          placeholder="Name"
          value={name}
          onChange={(e) => {
            console.log(e.target.value);
            // needed to sync the state which will allow you to type and type over the placeholder
            setName(e.target.value);
          }}
        />
      </label>
    </form>
  );
}



Note : if you want to surface data or functionality from a custom hook you must return it.


Warning Solution : 
"You provided a `value` prop to a form field without an `onChange` handler." - take the value attribute/prop and just name it defaultValue. Also, this assumes that you've already set state to some default value.

Looking for state change to see if something is working.  This is coming from a custom hook tied to useState() : 
React dev tools components -> search component name -> click at top level aka should be component name -> look for hooks below and ther is you data



Gotcha : 
HTML inputs always give you a String even if you entered a number.  If the code you are sending this data to expects a number and you've not handled this you'll get an error.

Stopped at 17:50 - need to get the number to show as a number type for price value.  Still shows as a string in react dev tools

Disabling all the inputs in a form with fieldset : 

fieldset allows you to wrap all your form stuff inside of it and control if all fields are enabled/disabled.

Note : textarea element does self close in React land

Note : e.preventDefault() also prevents the data from being put in the URL string making it not visible to everyone.

required attribute on an input tag makes that bit of data required - must put something in the box users! 


Uploading files and Graphql :
no standard on how to do it currently.
this project uses apollo-upload-client


Graphql Mutation : 

Use Playground to first see if your mutation will work.

Example of what is going on : 
from playground -> 

mutation {
  createProduct(data:{  //this is what we pass into the function as in 
                        // "go and make this"
    name: "Sample Product",
    description: "Test",
    price: 125
  }) {  // this is what we are asking to get back from the DB
    id
    price
    description
  }
}






Note : this is graphql syntax not to be confused with other syntax

Note : requires -> import gql from 'graphql-tag';

See CREATE_PRODUCT_MUTATION : running this will create a "Sample Product" in Keystone and will add whatever data you give it as the values of the fields.

const CREATE_PRODUCT_MUTATION = gql`
  mutation CREATE_PRODUCT_MUTATION (  //name it.  here it is 	     
    //$ = graphql vars                                  //CREATE_PRODUCT_MUTATION
    $name: String!
    $description: String!
    $price: Int!
    $image: Upload
  ){
    createProduct(
      data: {
        name: $name
        description: $description
        price: $price
        status: "AVAILABLE"
        photo: { create: { image: $image, altText: $name } }
      }
    ) {
      id
      price 
      description
      name
    }
  }
`;


understanding this bit : 


Doing a nested create and linking them as a relationship all from one query which is supported in keystone.js and others. 


photo: { create: { image: $image, altText: $name } } -> this is saying go ahead and create the relationship and the photo (item) behind the scenes.


photo is not a field persay.  It is it's own type with a relationship.

///// sequence of things happening once you submit the form with the "+ Add Product" button : 
Click the button with your data loaded in the form inputs.
Disables the form.
Progress bar/loading indicator animates while in loading state.
We then await createProduct() and get back our "res" response.
Also, once we get success to all above we also run the function to clear out the form so that only placeholder text will appear. 

Note that in CreateProduct.js, in the Form tag onSubmit, the "res", which has "res.data" on it is the same as the destructured data we are getting when we define useMutation : 


const res = await createProduct(); //res.data
	=
const [createProduct, { loading, error, data }] = useMutation(

Why is the above important?  In React, we can access either of the two datas and know that it will always be updated.


video 25 : 
dealing with handling that when we submit a new product via the UI and go back to see the list of products on the Products page, the new product is not there until we manually refresh the page.  

Wes mentions two ways of handling this.


video 26 : how to programmatically change the page after product creation.

Next.js has APIs to handle this. 
We use 
import Router from 'next/router';


An aside, create a directory and a file in vs code in one go : 

select create new file
type the name of the dir and the file : product/something.js


Next.js specific : 

product/[id].js -> says use this template for anything that 
matches /product/anything.  Next.js will give us a query param, in this case [id] so that we can go look up the item in our DB.



Query a single product by ID : 
Note : if you are ever returning one item from a query it must use a unique field which is why we use id here. 

query {
  Product(where: {
    id: "63b306774631d8323e645f12"
  }) {
    name
    price
    description
  }
}

...and you should get back : 

{
  "data": {
    "Product": {
      "name": "Nice Map",
      "price": 1099,
      "description": "Find it!"
    }
  }
}


Query a single product from a list : 

query {
  
  allProducts(where: {
    name_contains_i: "map"      // i is insensitive 
  }) {
    name
    price
  }
  
}

...and you should get back :  

{
  "data": {
    "allProducts": [
      {
        "name": "Nice Map",
        "price": 1099
      }
    ]
  }
}


An aside, when logging out destructured "stuff" use { } so that it gets logged as an object : 
console.log({ data, loading, error });


Note : in SingleProduct.js, what we get back from our query is "Product".  It is capital "P" because this is what graphql returns back to us.  See the query : 

const SINGLE_ITEM_QUERY = gql`
  query SINGLE_ITEM_QUERY($id: ID!) {
    Product(where: { id: $id }) {  //** Product will be returned back so   
                                   // we need to access all the props 
                                   // with Product.*
      name
      price
      description
    }
  }
`;

For above, to change the name from what comes back from the API, here we renamed the query "items" and we will access the data with "data.items.*". Use case here is when we are querying two different Products but since we can't have the same name we rename to "items".


const SINGLE_ITEM_QUERY = gql`
  query SINGLE_ITEM_QUERY($id: ID!) {
    items: Product(where: { id: $id }) { 
      name
      price
      description
    }
  }
`;


Define the title tag in Next.js (see SingleProduct.js) : 

use this : 
import Head from 'next/head';

Then... whatever gets put in the <Head> tag Next.js will stick it in the Head of the document.  
Gatsby we had to use react-helmet to do this.


Note : What params does this mutation need? say you're doing a mutation and need to see what args something like updateProduct() needs.  Go to the playground, put the cursor in the parens and you should see a dropdown of required args plus maybe even required types with "!" : 

mutation {
  updateProduct()  <--- what's gonna go in here? Oh no!!! 
}






Note : Rename the destructured variable : 

 { data: updateData, error: updateError, loading: updateLoading }


Two ways : 
With CreateProduct & UpdateProduct we are passing the inputs data to updateProduct() two different ways : 

CreateProduct we are passing at definition : 

const [createProduct, { loading, error, data }] = useMutation(
    CREATE_PRODUCT_MUTATION,
    {
      variables: inputs, 
      refetchQueries: [{ query: ALL_PRODUCTS_QUERY }], 
    }
  );



UpdateProduct we are passing at on call : 


    <Form
      onSubmit={async (e) => {
        e.preventDefault();
        const res = await updateProduct({
          variables: {
            id,
            data: {
              name: inputs.name,
              description: inputs.description,
              price: inputs.price,
            },
          },
        }).catch(console.error);


useForm Hook Bug - why the updateproduct form only loads the data in the fields on page refresh : 

the solution : 

When the undefined initial state of loading changes to an actual object with data we need to update it.  

We will use useEffect with this as we can monitor bits of state change.  

The Why : 
Has to do with initial data and how we are using it in the useForm() hook.  The initial state must be the existing data that we pulled from the DB.  When we refresh the page, we get the data because the initial load "of that" ??? is happening on the server. There is no loading state on the server as it just waits for the data to come back from our graphql API.  However, on the client there is a loading state.  So, you load the component, it loads for a quick second making it in a loading state, then "it" ?? gets the data back and then it runs "it" ?? 

React doesn't like hooks being rendered out of order or not rendered or something that does not allow us to just use this conditional under the UpdateProduct() useQuery : 
if (loading) return <p>Loading... <p> 
And if we try to use it we get back " Error: Rendered more hooks than during previous render "

The problem with this is that we don't want to create the useForm (I guess like render the form with the existing data???) until we have the data. 

Again, we will use useEffect in useForm.  

Gotcha : can't do this cause you'll get an infinite loop.  see video 29 min 4:25-ish. 

  useEffect(() => {
    setInputs(initial);
  }, [initial]);

The Loop : 
If you listen to initial with useEffect(), it will update on a change but then that update causes a change so another update then another change and so on...


  We need this bit instead : 


  const initialValues = Object.values(initial).join('');

  useEffect(() => {
    // This function runs when the things we are watching change
    setInputs(initial);
  }, [initialValues]);


  How this code works : 

  This is what we will use to watch for a change.  We will watch the actual values on the object and when the values of name, price, description go from nothing to something we know there's been a change 

  const initialValues = Object.values(initial).join('');

Object.values gives us an Array of objects with the data.
We use join to give us a String.


This whole thing happens once : it will go from a String of nothing to a String of the default values that are coming in.  

Note : 
When writing a graphql query or mutation and you need to find the graphql method you need to run, go to the playground, write the query/mutation and then type in some text to get autocomplete suggestions.  Once you find the method you need go to the docs in the playground and see what args it expects. 

  Example : 
  You want to write a mutation to delete a product.  Go to the playground and start typing... 

  mutation {
    "and I'm typing del... & then I get suggestions and choose deleteProduct" 
  }

  Then I go look in the docs and get this info :

  Arguments : 
  id: ID!
  

  Since we now know it takes an ID we pass it the id in the mutation. 


Understanding this from playground docs : 

Here, this says Product will be returned

deleteProduct(
id: ID!
): Product


In Type Details (playground) : 
in this section all of fields listed are available once the delete returns the deleted item. 


 At the end of video 30 Delete Products, you'll be able to delete an item but at this point you should refresh and then it gets deleted. 

Deleting a product : 
By the end of v 30, we can do the above.  The reason it still appears on the screen is that yes we have deleted from the DB but the item still needs to be removed from cache.  


Note on planning for pagination :

Generally we want to have a set of 2,4,6, whatever # of items show per page and then 
list how many possible pages there are.


1. Render the actual links
2. Allow for dynamic routing
3. Filter the products for the current page
4. Deal with Cache invalidation 

Gotcha : 
autoimport looks like this and does not work : 
import { Link } from 'next/link';

make it like this : 
import Link from 'next/link';

...and for the above here's a case where {} does work : 
export { default } from './index';



Keystone metaquery used in playgroung to get a count of items : 

query {
  _allProductsMeta {
    count
  }
}



Note : if you're checking for loading state but want to return nothing return null. 


Note (This is a next.js thing) : 
Link tag doesn't let us add new attributes like for example when we need aria-disabled for our pagination.  We need to use <a> inside the <Link> like : 

<Link href={`/products/${page - 1}`}>
  <a aria-disabled={page <= 1}>◀️ Prev</a>
</Link>



Couple types of routing : 

Query String Routing 
localhost:7777/products?page=2

File Based Routing
localhost:7777/products/2



Note : 
in pages/products/index.js, we clg the router.
look in the logs for query.
query will have the current page number
reason why query has this # is because we named 
pages/products/[page].js with the []. 

Note : 
if you need to know what type something is use this : 
console.log(typeof query.page); 

Cache invalidation : sucks but this is what we gotta do currently 


Our Cache Validation problem and painful solution : 
When we delete an item, it needs to be taken from the cache and then all the following items need to be moved up. 


Below example : we are doing 2 products per page and each page is separated by a single -
---
1
2
-
3
4
-
5
6
--- delete product 3
1
2
-
"deleted 3- empty space - move below up" 
4
-
5
6
--- shift items up 
1
2
-
4
5
-
6
---


Apollo's read() & merge() : 

When Apollo tries to query for allProducts, it first gets the items from read().  At this point, we can do 1 of 2 things : 1st, return the items because they are already in the cache.  Other thing we could do is if there are no items in the cache, return false, which will kick off a network request because when Apollo doesn't get anything from read() that it wants it will go out to the network (keystone) & try to get the items.
merge() comes in when Apollo goes out to the network, gets data and says "Ok, you said you didn't have any data for me so I went out and got it myself from the network.  Here it is & then we run this merge() function.  merge() will handle how we want to manage our data.  


Gotcha : 
Must look like this in lib/paginationField.js or it breaks : 
import { PAGINATION_QUERY } from '../components/Pagination';

Note : 
lib/paginationField.js -> if we do a successful read the first time we return the items.  If we had to use merge then we would do a read() first then a merge() then another read() to return the items. 

You probably want to go over video 35 again.

Module 8 : 


Created useUser() custom hook which lives in User.js 

Use firefox incognito mode as it shows you as signed out. 

In the SIGNIN_MUTATION, you can learn more about UserAuthenticationWithPasswordSuccess by looking at authenticateUserWithPassword method in the playground.  

Stopped at 14:09